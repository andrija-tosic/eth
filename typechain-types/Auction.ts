/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AuctionStructStruct = {
  item: string;
  description: string;
  endTime: BigNumberish;
};

export type AuctionStructStructOutput = [
  item: string,
  description: string,
  endTime: bigint
] & { item: string; description: string; endTime: bigint };

export interface AuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionEndTime"
      | "beneficiary"
      | "bid"
      | "bidderCount"
      | "description"
      | "end"
      | "ended"
      | "getPendingReturnForBidder"
      | "getRaters"
      | "highestBid"
      | "highestBidder"
      | "item"
      | "rate"
      | "raters"
      | "ratings"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionEnded"
      | "HighestBidIncreased"
      | "HighestBidLost"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bidderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(functionFragment: "ended", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPendingReturnForBidder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getRaters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "item", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "raters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ratings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ended", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReturnForBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRaters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "item", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ratings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HighestBidIncreasedEvent {
  export type InputTuple = [bidder: AddressLike, amount: BigNumberish];
  export type OutputTuple = [bidder: string, amount: bigint];
  export interface OutputObject {
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HighestBidLostEvent {
  export type InputTuple = [bidder: AddressLike, amount: BigNumberish];
  export type OutputTuple = [bidder: string, amount: bigint];
  export interface OutputObject {
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Auction extends BaseContract {
  connect(runner?: ContractRunner | null): Auction;
  waitForDeployment(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionEndTime: TypedContractMethod<[], [bigint], "view">;

  beneficiary: TypedContractMethod<[], [string], "view">;

  bid: TypedContractMethod<[], [void], "payable">;

  bidderCount: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  end: TypedContractMethod<[], [void], "nonpayable">;

  ended: TypedContractMethod<[], [boolean], "view">;

  getPendingReturnForBidder: TypedContractMethod<
    [bidder: AddressLike],
    [bigint],
    "view"
  >;

  getRaters: TypedContractMethod<[], [string[]], "view">;

  highestBid: TypedContractMethod<[], [bigint], "view">;

  highestBidder: TypedContractMethod<[], [string], "view">;

  item: TypedContractMethod<[], [string], "view">;

  rate: TypedContractMethod<[rating: BigNumberish], [void], "nonpayable">;

  raters: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  ratings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdraw: TypedContractMethod<[], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "bidderCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "end"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ended"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getPendingReturnForBidder"
  ): TypedContractMethod<[bidder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRaters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "highestBid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "highestBidder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "item"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rate"
  ): TypedContractMethod<[rating: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "raters"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ratings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [boolean], "nonpayable">;

  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "HighestBidIncreased"
  ): TypedContractEvent<
    HighestBidIncreasedEvent.InputTuple,
    HighestBidIncreasedEvent.OutputTuple,
    HighestBidIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "HighestBidLost"
  ): TypedContractEvent<
    HighestBidLostEvent.InputTuple,
    HighestBidLostEvent.OutputTuple,
    HighestBidLostEvent.OutputObject
  >;

  filters: {
    "AuctionEnded(address,uint256)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "HighestBidIncreased(address,uint256)": TypedContractEvent<
      HighestBidIncreasedEvent.InputTuple,
      HighestBidIncreasedEvent.OutputTuple,
      HighestBidIncreasedEvent.OutputObject
    >;
    HighestBidIncreased: TypedContractEvent<
      HighestBidIncreasedEvent.InputTuple,
      HighestBidIncreasedEvent.OutputTuple,
      HighestBidIncreasedEvent.OutputObject
    >;

    "HighestBidLost(address,uint256)": TypedContractEvent<
      HighestBidLostEvent.InputTuple,
      HighestBidLostEvent.OutputTuple,
      HighestBidLostEvent.OutputObject
    >;
    HighestBidLost: TypedContractEvent<
      HighestBidLostEvent.InputTuple,
      HighestBidLostEvent.OutputTuple,
      HighestBidLostEvent.OutputObject
    >;
  };
}
